{"version":3,"sources":["async_config_server.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA,iBAAe;AACf,4BAA0B;AAC1B,qCAAqC;AACrC,iCAAiC;AACjC,gCAKgB;AAChB,yCAAuC;AACvC,yCAAsC;AAItC,IAAM,aAAa,GAAnB;IAEY,MAAM;QACV,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAGO,KAAK;QACT,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACzB,CAAC;CACJ,CAAA;AAHG;IADC,SAAG,CAAC,GAAG,CAAC;;;;0CAGR;AATC,aAAa;IAFlB,gBAAU,CAAC,MAAM,CAAC;IAClB,sBAAU,EAAE;GACP,aAAa,CAUlB;AAKD,IAAI,SAAS,GAAG,IAAI,qBAAS,EAAE,CAAC;AAChC,SAAS,CAAC,IAAI,CAAwB,UAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;AAC1G,IAAI,MAAM,GAAG,IAAI,yBAAmB,CAAC,SAAS,CAAC,CAAC;AAChD,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE;IACzB,GAAG,CAAC,UAAU,CAAC,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IAC7B,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACL,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IACvC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,QAAQ,GAAG,CAAC,GAAU,EAAE,GAAQ,EAAE,EAAE;IACtC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACN,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;IAED,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAElD,GAAG,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,EAAE,4BAA4B,CAAC,CAAC;AACzD,CAAC,CAAC;AAGF,QAAQ,CAAC,aAAa,EAAE,GAAQ,EAAE;IAC9B,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC9C,EAAE,CAAC,2BAA2B,EAAE,GAAQ,EAAE;QACtC,IAAI,CAAC;YACF,MAAM,QAAQ,GAAI,MAAM,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC;iBAClD,GAAG,CAAC,OAAO,CAAC;iBACZ,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACnC,CAAC;QACL,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,MAAM,GAAG,CAAC;QACd,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;AACP,CAAC,CAAA,CAAC,CAAC","file":"async_config_server.spec.js","sourcesContent":["\nimport \"mocha\";\nimport \"reflect-metadata\";\nimport * as request from \"supertest\";\nimport * as assert from \"assert\";\nimport { InversifyHapiServer,\n    Controller,\n    interfaces,\n    TYPE,\n    Get,\n} from \"../src\";\nimport { injectable } from \"inversify\";\nimport { Container } from \"inversify\";\n\n@Controller(\"/foo\")\n@injectable()\nclass FooController implements interfaces.Controller {\n\n    private getFoo(): string {\n        return \"foo\";\n    }\n\n    @Get(\"/\")\n    private index(): string {\n        return this.getFoo();\n    }\n}\n\n\n\n/// Server\nlet container = new Container();\ncontainer.bind<interfaces.Controller>(TYPE.Controller).to(FooController).whenTargetNamed(\"FooController\");\nlet server = new InversifyHapiServer(container);\nserver.setConfig((app, fn) => {\n    app.connection({port: 8080});\n    if (fn) {\n        app.register(require(\"hapi-pino\"), fn);\n    } else {\n        app.register(require(\"hapi-pino\"));\n    }\n});\n\nconst callback = (err: Error, app: any) => {\n    if (err) {\n        console.error(err);\n        process.exit(1);\n    }\n    // The logger is available as a decorated API\n    app.logger().info(\"another way for accessing it\");\n    // // and through Hapi standard logging system\n    app.log([\"subsystem\"], \"third way for accessing it\");\n};\n\n/// Tests\ndescribe(\"hapi server\", async() => {\n    const serverInstance = server.build(callback);\n    it(\"Should return 200 for get\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .get(\"/foo/\")\n                .expect(200);\n            assert.equal(response.text, \"foo\");\n            ;\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n});\n"],"sourceRoot":"/Users/ericsonm/inversify-project/inversify-hapijs-utils/test"}