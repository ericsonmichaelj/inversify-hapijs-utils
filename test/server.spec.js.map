{"version":3,"sources":["server.spec.ts"],"names":[],"mappings":"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","file":"server.spec.js","sourcesContent":["\nimport \"mocha\";\nimport \"reflect-metadata\";\nimport * as request from \"supertest\";\nimport * as assert from \"assert\";\nimport { InversifyHapiServer,\n    Controller,\n    interfaces,\n    TYPE,\n    Get,\n    Post,\n    Put,\n    Delete,\n    Options,\n\n    Patch\n} from \"../src\";\nimport { injectable } from \"inversify\";\nimport { Container } from \"inversify\";\n\n@Controller(\"/foo\")\n@injectable()\nclass FooController implements interfaces.Controller {\n    @Get(\"/\")\n    private index(): string {\n        return \"foo\";\n    }\n    @Post(\"/\")\n    private post(): string {\n        return \"foo\";\n    }\n    @Put(\"/\")\n    private put(): string {\n        return \"foo\";\n    }\n    @Patch(\"/\")\n    private patch(): string {\n        return \"foo\";\n    }\n    @Delete(\"/\")\n    private delete(): string {\n        return \"foo\";\n    }\n    @Options(\"/\")\n    private options(): string {\n        return \"foo\";\n    }\n}\n\n/// Server\nlet container = new Container();\ncontainer.bind<interfaces.Controller>(TYPE.Controller).to(FooController).whenTargetNamed(\"FooController\");\nconsole.log(TYPE.Controller);\nconsole.log(container.getAll(TYPE.Controller));\nlet server = new InversifyHapiServer(container, { port: 8080 });\n\n\ndescribe(\"hapi server\", async() => {\n    const serverInstance = await server.build();\n    it(\"Should return 200 for get\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .get(\"/foo/\")\n                .expect(200);\n            assert.equal(response.text, \"foo\");\n            ;\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should return 200 for post\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .post(\"/foo/\")\n                .expect(200);\n            assert.equal(response.text, \"foo\");\n            ;\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should return 200 for put\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .put(\"/foo/\")\n                .expect(200);\n            assert.equal(response.text, \"foo\");\n            ;\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should return 200 for delete\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .delete(\"/foo/\")\n                .expect(200);\n            assert.equal(response.text, \"foo\");\n            ;\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should return 200 for options\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .options(\"/foo/\")\n                .expect(200);\n            assert.equal(response.text, \"foo\");\n            ;\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should return 200 for patch\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .patch(\"/foo/\")\n                .expect(200);\n            assert.equal(response.text, \"foo\");\n            ;\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n\n});\n"],"sourceRoot":"/Users/ericsonm/inversify-project/inversify-hapijs-utils/test"}