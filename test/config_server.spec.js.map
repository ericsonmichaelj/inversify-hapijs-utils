{"version":3,"sources":["config_server.spec.ts"],"names":[],"mappings":"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","file":"config_server.spec.js","sourcesContent":["\nimport \"mocha\";\nimport \"reflect-metadata\";\nimport * as request from \"supertest\";\nimport * as assert from \"assert\";\nimport { promisify } from \"util\";\nimport { InversifyHapiServer,\n    Controller,\n    interfaces,\n    TYPE,\n    Get,\n} from \"../src\";\nimport { injectable } from \"inversify\";\nimport { Container } from \"inversify\";\nimport * as Boom from \"boom\";\n\nexport const securityHandler = (req: Request) => {\n    // Return a Boom (or any Error) if you want processing to stop\n    if (!req.headers[\"token\"]) {\n        return Boom.unauthorized(\"No sessionsession id in request header\");\n    }\n    return null;\n  };\n\n@Controller(\"/\", securityHandler)\n@injectable()\nclass FooController implements interfaces.Controller {\n    @Get(\"/foo\")\n    private index(): string {\n        return \"foo\";\n    }\n    @Get(\"/async\")\n    private async async(): Promise<string> {\n        const delay = promisify(setTimeout);\n        await delay(1);\n        return \"foo\";\n    }\n    @Get(\"/nullAsync\")\n    private async nullAsync(): Promise<void> {\n        const delay = promisify(setTimeout);\n        return delay(1);\n    }\n    @Get(\"/thowAsync\")\n    private async throwAsync(): Promise<void> {\n        const delay = promisify(setTimeout);\n        delay(1);\n        throw new Error(\"Async\");\n    }\n    @Get({ path: \"/path\"})\n    private path(){\n        return \"path\";\n    }\n    @Get(\"/null\")\n    private null(){\n        console.log(\"nothing to do\");\n    }\n}\n\n\n\n/// Server\nlet container = new Container();\ncontainer.bind<interfaces.Controller>(TYPE.Controller).to(FooController).whenTargetNamed(\"FooController\");\nlet server = new InversifyHapiServer(container, { port: 8080 });\nserver.setConfig((app) => {\n    app.cache({segment: \"foo\", expiresIn: 60 * 60 * 1000 });\n});\n\n\n/// Tests\ndescribe(\"hapi server with config\", async() => {\n    const serverInstance = await server.build();\n    it(\"Should return 401 without headers\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .get(\"/foo\")\n                .expect(401);\n            assert.equal(response.body.message, \"No sessionsession id in request header\");\n            ;\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should return 200 with headers\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .get(\"/foo\")\n                .set(\"token\", \"a\")\n                .send()\n                .expect(200);\n            assert.equal(response.text, \"foo\");\n            ;\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should work with async methods\", async() => {\n        try {\n           const response =  await request(serverInstance.listener)\n                .get(\"/async\")\n                .set(\"token\", \"a\")\n                .send()\n                .expect(200);\n            assert.equal(response.text, \"foo\");\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should have a status of 204 with async methods that return undefined\", async() => {\n        try {\n           await request(serverInstance.listener)\n                .get(\"/nullAsync\")\n                .set(\"token\", \"a\")\n                .send()\n                .expect(204);\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should have a status of 500 with async methods that return undefined\", async() => {\n        try {\n           await request(serverInstance.listener)\n                .get(\"/thowAsync\")\n                .set(\"token\", \"a\")\n                .send()\n                .expect(500);\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should have a status of 200 using a path object\", async() => {\n        try {\n           const response = await request(serverInstance.listener)\n                .get(\"/path\")\n                .set(\"token\", \"a\")\n                .send()\n                .expect(200);\n            assert.equal(response.text, \"path\");\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n    it(\"Should have a status of 200 if do not return anything\", async() => {\n        try {\n           await request(serverInstance.listener)\n                .get(\"/null\")\n                .set(\"token\", \"a\")\n                .send()\n                .expect(200);\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    });\n});\n"],"sourceRoot":"/Users/ericsonm/inversify-project/inversify-hapijs-utils/test"}